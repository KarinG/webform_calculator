<?php

define('WEBFORM_CALCULATOR_REGEX', '/\{\w+\}/');

/**
 * Implements of hook_webform_component_info().
 */
function webform_calculator_webform_component_info() {
  $components = array();

  $components['formula'] = array(
    'label' => t('Formula'),
    'description' => t('Computes values of other fields.'),
    'features' => array(
      'required' => FALSE,
      ),
    'file' => 'components/formula.inc',
    );

  return $components;
}

/**
 * Implements hook_webform_submission_presave().
 */
function webform_calculator_webform_submission_presave($node, &$submission) {
  $data = array(
    'node' => $node,
    'webform' => $submission,
  );

  foreach ($node->webform['components'] as $component) {
    if ($component['type'] == 'formula') {
      $submission->data[$component['cid']]['value'][0] = webform_calculator_replace_formula_values($component, $node, $submission);
    }
  }
}

function webform_calculator_eval($formula, $precision = 1) {
  eval("\$result = $formula;");
  return round($result, $precision);
}

/**
 * Implements hook_theme().
 */
function webform_calculator_theme() {
  return array(
    'webform_calculator_formula' => array(
      'render element' => 'element',
      'arguments' => array('element' => NULL),
      ),
  );
}

/**
 * Format the output of data for this component.
 */
function theme_webform_calculator_formula($variables) {
  $element = $variables['element'];
  $element['#value'] = empty($element['#value']) ? ' ' : $element['#value'];
  return $element['#format'] == 'html' ? check_plain($element['#value']) : $element['#value'];
}


function webform_calculator_get_components_from_formula($formula) {
  $components = array();
  if (preg_match_all(WEBFORM_CALCULATOR_REGEX, $formula, $matches)) {
    foreach ((array)$matches[0] as $match) {
      $components[] = str_replace(array('{', '}'), array('', ''), $match);
    }
  }
  return $components;
}

function webform_calculator_replace_formula_values($formula_component, $webform_node, $submission) {
  $formula = $formula_component['value'];
  $components_from_formula = webform_calculator_get_components_from_formula($formula);

  // Get webform components keyed by form key.
  $components_by_key = array();
  foreach ($webform_node->webform['components'] as $component) {
    $components_by_key[$component['form_key']] = $component;
  }

  foreach ($components_from_formula as $component_key) {
    if (isset($components_by_key[$component_key])) {
      $component = $components_by_key[$component_key];
      $formula = str_replace('{' . $component_key . '}', '(' . $submission->data[$component['cid']]['value'][0] . ')', $formula);
    }
  }

  try  {
    webform_calculator_validate_php($formula);
    return webform_calculator_eval($formula, $formula_component['extra']['precision']);
  }
  catch (Exception $e) {
    return 0;
  }
}

function webform_calculator_validate_php($code) {
  $allowed_tokens = array(T_LNUMBER, T_DNUMBER, T_WHITESPACE);
  $allowed_chars = array('+', '-', '*', '/', '^', '(', ')', '%');

  $tokens = token_get_all('<?php ' . $code);
  // Remove opening php tag.
  array_shift($tokens);

  foreach ($tokens as $token) {
    // Checking for allowed characters.
    if (is_string($token)) {
      if (!in_array($token, $allowed_chars)) {
        throw new Exception(t('Disallowed character %char encountered.', array('%char' => $token)));
      }
      continue;
    }
    // Checking for allowed tokens.
    if (!in_array($token[0], $allowed_tokens)) {
      throw new Exception(t('Using %token disallowed.', array('%token' => token_name($token[0]))));
    }
  }

  // Check PHP syntax.
  ob_start();
  if (FALSE === @eval('$return_array = ' . $code . ';')) {
    throw new Exception(t('Error occurred while parsing code.'));
  }
  else {
    ob_end_clean();
    return TRUE;
  }
}

